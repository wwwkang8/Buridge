plugins {
    id "java-library"
    id "checkstyle"
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "io.freefair.lombok" version "6.3.0"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.realestate.service'
version = '0.0.1'
sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-apt"
    implementation "com.querydsl:querydsl-sql"
    implementation "com.querydsl:querydsl-sql-spring"
    implementation "org.apache.commons:commons-lang3"
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0"
    implementation 'com.sendgrid:sendgrid-java:4.8.3'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
//	runtime "org.mariadb.jdbc:mariadb-java-client"
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly "com.h2database:h2"

    testRuntimeOnly "com.h2database:h2"
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.mockito:mockito-inline"
}

test {
    failFast(true)
    useJUnitPlatform()
}

asciidoctor {
    baseDirFollowsSourceDir()
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into "static/docs"
    }
    archiveFileName.set "${rootProject.name}.jar"
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

//// querydsl 적용
def querydslSrcDir = "src/main/generated"

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", querydslSrcDir]
        }
    }
}

project.afterEvaluate {
    project.tasks.compileQuerydslJava {
        onlyIf { false }
    }
}

checkstyleMain {
    checkstyleTest.enabled(false)
    setSource("src/main/java")
    ignoreFailures(false)
    maxWarnings(0)
}
